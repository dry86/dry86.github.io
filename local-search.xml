<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>win11 for arm  KB5016629 更新使系统崩溃 Record</title>
    <link href="/2022/08/14/win11-for-arm-%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%B3%BB%E7%BB%9F%E5%B4%A9%E6%BA%83Record/"/>
    <url>/2022/08/14/win11-for-arm-%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%B3%BB%E7%BB%9F%E5%B4%A9%E6%BA%83Record/</url>
    
    <content type="html"><![CDATA[<h1 id="win11-for-arm-更新使系统崩溃-Record"><a href="#win11-for-arm-更新使系统崩溃-Record" class="headerlink" title="win11 for arm  更新使系统崩溃 Record"></a>win11 for arm  更新使系统崩溃 Record</h1><p><img src="Untitled.png"></p><p>电脑打开情况：</p><p><img src="Untitled-3.png"></p><p>具体的更新名称：2022-适用于 Windows 11 的 08 累积更新，适合基于 arm64 的系统 (KB5016629)   </p><p>不确定这是不是个例，我通过另外新建一个win11，尝试更新KB5016629，发现依然使系统崩溃！</p><p>此电脑是在parallel desktop 17 虚拟机中 ：win11 for arm，平时就不怎么更新，想着有段时间没更新了，更下吧。没想到重新启动直接 windows 崩溃 ！无法开机。🤯🤬 本来就鹅心windows的自动更新，真够反人类的，毕竟它每次更新 绝大多数用户能感知到吗？不知道有多少电脑使用者被这个自动更新影响过！ 想立马关机走人？准备开机工作？想重启点错？使用电源时提醒更新？这些我都遇到过😇 </p><hr><p>开始找解决办法：</p><p>通过高级选项 找到cmd 通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span> C:\Windows\System32\Logfiles\Srt\SrtTrail.txt<br></code></pre></td></tr></table></figure><p>查看到具体出错原因：</p><p>启动关键文件：<strong>c:\efi\microsoft\boot\cipolicies\active{cdd5cb55-db68-4d71-aa38-3df2b6473a52}.cip 损坏。</strong></p><p><img src="Untitled-2.png"></p><p>网上搜索找到几种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#cmd执行</span><br>sfc /scannow<br></code></pre></td></tr></table></figure><p>报：windows 资源保护无法执行该请求</p><p><a href="http://t.csdn.cn/fxOIf">http://t.csdn.cn/fxOIf</a>  通过这篇博客  开：安全模式 、禁用驱动器签名加载 等，均不管用，无法执行 <code>sfc /scannow</code> 命令，依然报 资源保护。</p><p>尝试下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chkdsk X: /R /F <br></code></pre></td></tr></table></figure><p>倒能进行磁盘检查，但好像没发现什么损坏问题，也没有进行修复。</p><p>在网上就再没看到其他有用的方法。</p><p>最后还是走了重置的路。</p><p>重置选择保留个人文件</p><p>重置后发现C盘下个人创建的文件夹都还在，说明数据丢失还不是很严重！所有的应用程序都没有了，重置后会给一个删掉的APP 列表。</p><p>开始重新下软件 、恢复到崩溃前的正常情况。。 历时整整2天！</p><p>当然重置电脑后第一件事：彻底关闭了win更新😤</p><p>具体方式使用了这篇文章中的添加注册表:  <a href="https://www.disktool.cn/content-center/stop-windows-11-update-666.html#:~:text=%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2Win11%E6%9B%B4%E6%96%B0%EF%BC%9F%201%20%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8%E5%85%B3%E9%97%ADWin11%E6%9B%B4%E6%96%B0%202,%E6%96%B9%E6%A1%88%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5%E7%BC%96%E8%BE%91%E5%99%A8%E5%85%B3%E9%97%ADWin11%E6%9B%B4%E6%96%B0%203%20%E6%96%B9%E6%A1%88%E4%B8%89%EF%BC%9A%E4%BD%BF%E7%94%A8Windows%E8%AE%BE%E7%BD%AE%E5%85%B3%E9%97%ADWin11%E6%9B%B4%E6%96%B0....%204%20%E6%96%B9%E6%A1%88%E5%9B%9B%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%85%B3%E9%97%ADWin11%E6%9B%B4%E6%96%B0">如何彻底关闭win11更新</a> </p><p>经历这次崩溃后，意识到备份的重要性。进行重要操作时，务必备份重要文件、虚拟机拍快照等方式！</p><p>爱护电脑，从不更新开始。</p>]]></content>
    
    
    <categories>
      
      <category>Windows11</category>
      
      <category>ARM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS(M1)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟悉JNI机制-Idea下JNI编程</title>
    <link href="/2022/07/05/%E7%86%9F%E6%82%89JNI%E6%9C%BA%E5%88%B6-Idea%E4%B8%8BJNI%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/07/05/%E7%86%9F%E6%82%89JNI%E6%9C%BA%E5%88%B6-Idea%E4%B8%8BJNI%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="熟悉JNI机制-Idea下JNI编程"><a href="#熟悉JNI机制-Idea下JNI编程" class="headerlink" title="熟悉JNI机制-Idea下JNI编程"></a>熟悉JNI机制-Idea下JNI编程</h1><p>在IDEA平台下配置JNI编程环境，能省去重复相同的命令行操作，像：javah、gcc命令，节约开发时间。</p><p>JNI编程命令行下的操作，可参考：<a href="http://t.csdn.cn/EO09I">http://t.csdn.cn/EO09I</a></p><hr><h2 id="工程目录如下："><a href="#工程目录如下：" class="headerlink" title="工程目录如下："></a>工程目录如下：</h2><p><img src="Untitled.png"></p><h2 id="1-写Java调用C代码"><a href="#1-写Java调用C代码" class="headerlink" title="1.写Java调用C代码"></a>1.写Java调用C代码</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JniHello</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;Demo_JniHello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayhello</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">JniHello</span>().sayhello();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2-“自动化”-javah-：使用Idea-External-Tools-生成-h文件"><a href="#2-“自动化”-javah-：使用Idea-External-Tools-生成-h文件" class="headerlink" title="2.“自动化” javah ：使用Idea External Tools 生成.h文件"></a>2.“自动化” <code>javah</code> ：使用Idea External Tools 生成.h文件</h2><p>External Tools位置：Preference→Tools→External Tools→ +</p><p><img src="Untitled1.png"></p><p>根据项目的实际目录配置好自动化执行内容：</p><p><img src="Untitled2.png"></p><p>在当前java文件下右键执行<code>javah</code>，生成相应的头文件<code>Demo_JniHello.h</code>（文件内容自动生成）：</p><p><img src="Untitled3.png"></p><hr><h2 id="3-写Java调用的C代码"><a href="#3-写Java调用的C代码" class="headerlink" title="3.写Java调用的C代码"></a>3.写Java调用的C代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jni.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Demo_JniHello.h&quot;</span></span><br><br>JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title function_">Java_Demo_JniHello_sayhello</span> <span class="hljs-params">(JNIEnv * env, jobject thisObj)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-“自动化”gcc命令：使用Idea-External-Tools-生成jnilib库"><a href="#4-“自动化”gcc命令：使用Idea-External-Tools-生成jnilib库" class="headerlink" title="4.“自动化”gcc命令：使用Idea External Tools 生成jnilib库"></a>4.“自动化”<code>gcc</code>命令：使用Idea External Tools 生成<code>jnilib</code>库</h2><p>与第2步相同，先新建一个External Tools并配置好执行内容：</p><p><img src="Untitled4.png"></p><p>Arguments：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">-dynamiclib<br>-I<br>（JDKPath）<br>$FileRelativeDir$/$FileNameWithoutExtension$.c<br>-o<br>lib$FileNameWithoutExtension$.jnilib<br></code></pre></td></tr></table></figure><p>在.c文件下右键执行gcc命令，生成<code>.jnilib</code>文件：</p><ul><li>Linux: <code>lib***.so</code></li><li>Win: <code>***.dll</code></li><li>Mac: <code>lib***.jnilib</code></li></ul><hr><h2 id="5-运行java"><a href="#5-运行java" class="headerlink" title="5.运行java"></a>5.运行java</h2><p><img src="Untitled5.png"></p><p>运行时出现的问题：</p><p><code>错误: 找不到 &#39;Demo_JniHello&#39; 的类文件</code></p><p>解决方法：</p><p>打开Idea Run/Debug Configuration → Add VM options：</p><p><img src="Untitled6.png"></p><p>VM options：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-Djava.library.path=$ProjectFileDir$<br></code></pre></td></tr></table></figure><p>即让Idea Run加入当前的java library path。</p><hr><hr><p>ref：</p><p><a href="http://t.csdn.cn/ObNiZ">http://t.csdn.cn/ObNiZ</a></p><p><a href="https://www.cnblogs.com/chaohacker/p/14259183.html">https://www.cnblogs.com/chaohacker/p/14259183.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JNI</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS(M1)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟悉swig-实现java调用c/c++</title>
    <link href="/2022/07/05/%E7%86%9F%E6%82%89swig-%E5%AE%9E%E7%8E%B0java%E8%B0%83%E7%94%A8c%20c++%20/"/>
    <url>/2022/07/05/%E7%86%9F%E6%82%89swig-%E5%AE%9E%E7%8E%B0java%E8%B0%83%E7%94%A8c%20c++%20/</url>
    
    <content type="html"><![CDATA[<h1 id="熟悉swig-实现java调用c-c"><a href="#熟悉swig-实现java调用c-c" class="headerlink" title="熟悉swig-实现java调用c/c++"></a>熟悉swig-实现java调用c/c++</h1><p>SWIG(Simplified Wrapper and Interface Generator)，是一款开源软件，其目的是将C/C++编写的函数库封装成其他语言的接口，包括:Java, Python, Perl, Ruby, C#, PHP等诸多主流编程语言。SWIG底层仍然还是JNI。</p><p>Swig可应用于包括windows、mac os x和linux在内的大多数操作系统平台。使用swig需要生成一个.i的接口文件，swig接口文件包含函数原型、类和变量声明，它的语法和普通的c/c++头文件一样。除了c/c++关键字和预处理器指令，接口文件还包含swig特有的预处理器指令，该指令可用于优化生成封装代码。</p><p>Swig 网站：<a href="https://www.swig.org/">https://www.swig.org/</a></p><p>Swig github ：<a href="https://github.com/swig/swig">https://github.com/swig/swig</a></p><h2 id="Swig的安装（macOS）"><a href="#Swig的安装（macOS）" class="headerlink" title="Swig的安装（macOS）"></a>Swig的安装（macOS）</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">brew install swig<br></code></pre></td></tr></table></figure><hr><h2 id="Swig的使用步骤"><a href="#Swig的使用步骤" class="headerlink" title="Swig的使用步骤"></a>Swig的使用步骤</h2><hr><h3 id="java获取c文件中的变量值"><a href="#java获取c文件中的变量值" class="headerlink" title="java获取c文件中的变量值"></a>java获取c文件中的变量值</h3><hr><ol><li>example.h</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>example.i</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">%module example  <br>%&#123;  <br><span class="hljs-comment">#include &quot;example.h&quot;  </span><br>%&#125;  <br>  <br>extern int counter;<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swig -java example.i<br></code></pre></td></tr></table></figure><ol start="3"><li>test.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;  <br>System.setProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>        System.loadLibrary(<span class="hljs-string">&quot;example&quot;</span>);  <br>      &#125;  <br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        System.out.println(example.getCounter());  <br>        example.setCounter(<span class="hljs-number">1</span>);  <br>        System.out.println(example.getCounter());  <br>      &#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>终端执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>gcc -dynamiclib -I /Users/dry/Library/Java/JavaVirtualMachines/azul-1.8.0_312/Contents/Home/include  *.c -o libexample.dylib<br>javac -d . *.java<br>java <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>gcc -I 后面的路径是 本机 jni 所在路径 （通过jdk所在目录查找）</p><hr><p>java使用c函数</p><hr><ol><li>example.c</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* File : example.c */</span>  <br>  <br><span class="hljs-comment">/* A global variable */</span>  <br><span class="hljs-type">double</span> Foo = <span class="hljs-number">3.0</span>;  <br>  <br><span class="hljs-comment">/* Compute the greatest common divisor of positive integers */</span>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;  <br>  <span class="hljs-type">int</span> g;  <br>  g = y;  <br>  <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;  <br>    g = x;  <br>    x = y % x;  <br>    y = g;  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> g;  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>example.i</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* File : example.i */</span>  <br>%module example  <br>  <br>%<span class="hljs-keyword">inline</span> %&#123;  <br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span>    <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>;  <br><span class="hljs-keyword">extern</span> <span class="hljs-type">double</span> Foo;  <br>%&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swig -java example.i    <span class="hljs-comment"># 生成example_wrap.c / example.java / exampleJNI.java文件</span><br></code></pre></td></tr></table></figure><ol start="3"><li>test.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>        System.loadLibrary(<span class="hljs-string">&quot;example&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (UnsatisfiedLinkError e) &#123;  <br>          System.err.println(<span class="hljs-string">&quot;Native code library failed to load. See the chapter on Dynamic Linking Problems in the SWIG Java documentation for help.\n&quot;</span> + e);  <br>          System.exit(<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String argv[])</span> &#123;  <br>        <span class="hljs-comment">// Call our gcd() function  </span><br>          <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">105</span>;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> example.gcd(x,y);  <br>        System.out.println(<span class="hljs-string">&quot;The gcd of &quot;</span> + x + <span class="hljs-string">&quot; and &quot;</span> + y + <span class="hljs-string">&quot; is &quot;</span> + g);  <br>          <br>        <span class="hljs-comment">// Manipulate the Foo global variable  </span><br>          <br>        <span class="hljs-comment">// Output its current value  </span><br>        System.out.println(<span class="hljs-string">&quot;Foo = &quot;</span> + example.getFoo());  <br>          <br>        <span class="hljs-comment">// Change its value  </span><br>        example.setFoo(<span class="hljs-number">3.1415926</span>);  <br>          <br>        <span class="hljs-comment">// See if the change took effect  </span><br>        System.out.println(<span class="hljs-string">&quot;Foo = &quot;</span> + example.getFoo());  <br>      &#125; <br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>终端运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -dynamiclib -I /Users/dry/Library/Java/JavaVirtualMachines/azul-1.8.0_312/Contents/Home/include  *.c -o libexample.dylib<br>javac -d . *.java<br>java <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><img src="Untitled.png" alt="Running"></p><hr><p>Ref：</p><p><a href="https://www.jianshu.com/p/8d8fdb095f88">https://www.jianshu.com/p/8d8fdb095f88</a></p><p><a href="https://juejin.cn/post/6844903581095559175">https://juejin.cn/post/6844903581095559175</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS(M1)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟悉JNA机制-实现Java调用C：HelloWorld和简单例子</title>
    <link href="/2022/04/04/%E7%86%9F%E6%82%89JNA%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/04/04/%E7%86%9F%E6%82%89JNA%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="熟悉JNA机制"><a href="#熟悉JNA机制" class="headerlink" title="熟悉JNA机制"></a>熟悉JNA机制</h1><p>JNA框架是一个开源的Java框架，是建立在经典的JNI基础之上的一个框架。<br>JNA使用一个小型的JNI库插桩程序来动态调用本地代码。<br>JNA是建立在JNI技术基础之上的一个Java类库，它使您可以方便地使用java直接访问动态链接库中的函数。<br>原来使用JNI，你必须手工用C写一个动态链接库，在C语言中映射Java的数据类型。<br>JNA中，它提供了一个动态的C语言编写的转发器，可以自动实现Java和C的数据类型映射，不再需要编写C动态链接库。</p><h2 id="在Idea中使用JNA："><a href="#在Idea中使用JNA：" class="headerlink" title="在Idea中使用JNA："></a>在Idea中使用JNA：</h2><ol><li>获取到JNA.jar</li></ol><p><a href="https://github.com/java-native-access/jna">GitHub - java-native-access/jna: Java Native Access</a></p><p><a href="https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.11.0/jna-5.11.0.jar"></a></p><ol start="2"><li>在Idea创建Java项目，导入JAR包<br>Idea: File → Project Structure → Libraries → “+”<br>将下载的jna.jar 加入到项目中</li></ol><p><img src="import.png" alt="导入Jar包"></p><ol><li>在项目src文件夹下，新建Test.java:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jna.Library;<br><span class="hljs-keyword">import</span> com.sun.jna.Native;<br><span class="hljs-keyword">import</span> com.sun.jna.Platform;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-comment">// This is the standard, stable way of mapping, which supports extensive</span><br>    <span class="hljs-comment">// customization and mapping of Java to native types.</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CLibrary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Library</span> &#123;<br>        <span class="hljs-type">CLibrary</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> (CLibrary)<br>                Native.loadLibrary((Platform.isWindows() ? <span class="hljs-string">&quot;msvcrt&quot;</span> : <span class="hljs-string">&quot;c&quot;</span>),<br>                        CLibrary.class);<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(String format, Object... args)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span>  <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br>        CLibrary.INSTANCE.printf(<span class="hljs-string">&quot;Hello,%d World\n&quot;</span>,j);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i &lt; args.length;i++) &#123;<br>            CLibrary.INSTANCE.printf(<span class="hljs-string">&quot;Argument %d: %s\n&quot;</span>, i, args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>直接运行：</li></ol><p><img src="helloworld.png" alt="HelloWorld"></p><h1 id="JNA-Example："><a href="#JNA-Example：" class="headerlink" title="JNA Example："></a>JNA Example：</h1><p><a href="https://www.eshayne.com/jnaex/index.html">JNA Examples</a></p><h1 id="使用Example"><a href="#使用Example" class="headerlink" title="使用Example"></a>使用Example</h1><h2 id="Example入门：Example-1-Send-and-Receive-an-Integer"><a href="#Example入门：Example-1-Send-and-Receive-an-Integer" class="headerlink" title="Example入门：Example #1: Send and Receive an Integer"></a>Example入门：<strong>Example #1: Send and Receive an Integer</strong></h2><ol><li>新建example.c文件：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">example1</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> val * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在当前文件夹下终端运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -dynamiclib -o libtestlib.dylib example.c<br></code></pre></td></tr></table></figure><p>生成Java调用需要的动态链接库</p><ol><li>新建Integer类文件：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jna.Library;<br><span class="hljs-keyword">import</span> com.sun.jna.Native;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CLibrary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Library</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">example1</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">CLibrary</span> <span class="hljs-variable">clib</span> <span class="hljs-operator">=</span> (CLibrary) Native.loadLibrary(<span class="hljs-string">&quot;libtestlib&quot;</span>, CLibrary.class);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">newVal</span> <span class="hljs-operator">=</span> clib.example1(<span class="hljs-number">23</span>);<br>        System.out.println(<span class="hljs-string">&quot;example 1: &quot;</span> + newVal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>运行</li></ol><p><img src="example1.png" alt="example #1"></p><h2 id="过程中出现的问题："><a href="#过程中出现的问题：" class="headerlink" title="过程中出现的问题："></a>过程中出现的问题：</h2><p>运行出现<code>Native library (darwin-aarch64/liblibtestlib.dylib) not found in resource path</code>问题</p><ul><li>解决：  将Native.loadLibrary()方法中的name 更改为绝对路径（将“libtestlib” 更换为此文件的绝对路径），即可运行</li></ul><h2 id="Java调用C-Struct-结构体出现的问题："><a href="#Java调用C-Struct-结构体出现的问题：" class="headerlink" title="Java调用C Struct 结构体出现的问题："></a>Java调用C Struct 结构体出现的问题：</h2><p>运行出现<code>Structure.getFieldOrder() on class Send_Struct.Test_S_S$CLibrary$Example3Struct$ByReference returns names ([]) which do not match declared field names ([value])</code></p><p>此类ByReference问题，在jna 5.x中，需要加@FieldOrder()注解</p><p>如在Example #3中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Structure</span>.FieldOrder(&#123;<span class="hljs-string">&quot;value&quot;</span>&#125;)<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example3Struct</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Structure</span> &#123;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByReference</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Example3Struct</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Structure</span>.ByReference &#123;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>便可运行。</p><hr><h2 id="Ref："><a href="#Ref：" class="headerlink" title="Ref："></a>Ref：</h2><p><a href="https://www.cnblogs.com/lanxuezaipiao/p/3635556.html">https://www.cnblogs.com/lanxuezaipiao/p/3635556.html</a><br><a href="https://stackoverflow.nilmap.com/question?dest_url=https://stackoverflow.com/questions/64835834/jna-structure-getfieldorder-does-not-match-declared-field-names">https://stackoverflow.nilmap.com/question?dest_url=https://stackoverflow.com/questions/64835834/jna-structure-getfieldorder-does-not-match-declared-field-names</a></p><p><a href="https://www.saoniuhuo.com/question/detail-2074103.html">https://www.saoniuhuo.com/question/detail-2074103.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JNI</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS(M1)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟悉JNI机制-Java调用C/C++简单实现(Mac M1)</title>
    <link href="/2022/03/30/%E7%86%9F%E6%82%89JNI%E6%9C%BA%E5%88%B6-Java%E8%B0%83%E7%94%A8C-C-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/03/30/%E7%86%9F%E6%82%89JNI%E6%9C%BA%E5%88%B6-Java%E8%B0%83%E7%94%A8C-C-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="编写Java调C-程序"><a href="#编写Java调C-程序" class="headerlink" title="编写Java调C++程序"></a>编写Java调C++程序</h1><h2 id="⬇️编写java代码，声明native方法"><a href="#⬇️编写java代码，声明native方法" class="headerlink" title="⬇️编写java代码，声明native方法"></a>⬇️编写java代码，声明native方法</h2><div class="code-wrapper"><pre><code class="hljs">创建HelloWorld.java（在一个新的文件夹下进行以下操作）    关键字native 来表明这个方法使用java以外的语言实现</code></pre></div><figure class="highlight arduino"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs arduino">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> native <span class="hljs-type">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-type">static</span> &#123;<br>        <span class="hljs-comment">//设置查找路径为当前项目路径</span><br>        System.<span class="hljs-built_in">setProperty</span>(<span class="hljs-string">&quot;java.library.path&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-comment">//加载动态库的名称</span><br>        System.<span class="hljs-built_in">loadLibrary</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span></span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">HelloWorld</span>().<span class="hljs-built_in">hello</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="⬇️javah命令生成-h文件"><a href="#⬇️javah命令生成-h文件" class="headerlink" title="⬇️javah命令生成.h文件"></a>⬇️javah命令生成.h文件</h2><p>编写HelloWorld.h</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javah </span>HelloWorld（<span class="hljs-keyword">javah </span>在 <span class="hljs-keyword">javac命令之前，否则javah报找不到类文件）</span><br></code></pre></td></tr></table></figure><h2 id="⬇️编译java代码"><a href="#⬇️编译java代码" class="headerlink" title="⬇️编译java代码"></a>⬇️编译java代码</h2><p>生成HelloWorld.class文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure><h2 id="⬇️编写本地实现代码"><a href="#⬇️编写本地实现代码" class="headerlink" title="⬇️编写本地实现代码"></a>⬇️编写本地实现代码</h2><p>创建HelloWorldlmp.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jni.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HelloWorld.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title">Java_HelloWorld_hello</span><span class="hljs-params">(JNIEnv *env,jobject obj)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用C++ -&gt; Cmake创建dll 动态库<br><code>gcc -dynamiclib -I /Users/dry/Library/Java/JavaVirtualMachines/azul-1.8.0_312/Contents/Home/include  HelloWorldlmp.c -o libhello.jnilib</code></p><div class="code-wrapper"><pre><code class="hljs">出现问题：Gcc 是arm64 ， jdk 是 x86    需要将jdk转换为 arm64  ⬇️所示    问题：mach-o file, but is an incompatible architecture (have &#39;arm64&#39;, need &#39;x86_64&#39;)    ⬇️    终端输入：/usr/libexec/java_home -V    查看jdk详细信息    ⬇️终端切换jdk    open ~/.bash_profile    # SWITCH TO JAVA VERSION 8 export JAVA_HOME=`/usr/libexec/java_home -v 1.8`    source ~/.bash_profile</code></pre></div><h2 id="➡️运行：-java-HelloWorld"><a href="#➡️运行：-java-HelloWorld" class="headerlink" title="➡️运行：  java HelloWorld"></a>➡️运行：  java HelloWorld</h2><p><img src="achieve.png" alt="调用成功截图"><br><img src="dict.png" alt="用到文件截图"> </p><hr><p>文章参考</p><blockquote><p><a href="http://t.csdn.cn/k3aIz">http://t.csdn.cn/k3aIz</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JNI</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS(M1)</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
